/*
 * Copyright (C) 2009 - 2019 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include <stdio.h>
#include <string.h>

#include "xgpio.h"
#include "xllfifo.h"
#include "xparameters.h"
#include "xstatus.h"
#include "xscugic.h"
#include "xil_exception.h"

#include "lwip/err.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

int transfer_data() {
	return 0;
}

void print_app_header()
{
#if (LWIP_IPV6==0)
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
#else
	xil_printf("\n\r\n\r-----lwIPv6 TCP echo server ------\n\r");
#endif
	xil_printf("ISCSI connection is open on port 3260\n\r");
}

static struct tcp_pcb* current_tpcb = NULL;
XLlFifo rx_fifo;
XLlFifo tx_fifo;

static void send_incoming_tcp(struct tcp_pcb *tpcb, struct pbuf *p)
{
	XLlFifo *fifo = &rx_fifo;
	current_tpcb = tpcb;
	u32 len = p->len;
	u32 buffer_len = XLlFifo_iTxVacancy(fifo);
	if (buffer_len < len) {
		len = buffer_len;
	}
	len &= ~0x03;

	if (len == 0) {
		return;
	}

	// set buffer
	u32* payload = (u32*) p->payload;
	for (u32 i = 0; i < (len >> 2); ++i) {
		XLlFifo_TxPutWord(fifo, payload[i]);
	}

	// start transmission
	XLlFifo_iTxSetLen(fifo, len);

	// wait for transmission to finish
	while (!XLlFifo_IsTxDone(fifo)) {
		xil_printf("transmitting...\n\r");
		sleep(1);
	}

	/* indicate that the packet has been received */
	xil_printf("Receive a packet with size %d bytes\n\r", len);
	 xil_printf("tx size = %d\n\r", XLlFifo_iRxOccupancy(&tx_fifo));
	xil_printf("RX status = %08x\n\r", XLlFifo_Status(&rx_fifo));
	xil_printf("TX status = %08x\n\r", XLlFifo_Status(&tx_fifo));
	tcp_recved(tpcb, len);
}

err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	// send this through rx fifo
	send_incoming_tcp(tpcb, p);

	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
{
	static int connection = 1;

	/* set the receive callback for this connection */
	tcp_recv(newpcb, recv_callback);

	/* just use an integer number indicating the connection id as the
	   callback argument */
	tcp_arg(newpcb, (void*)(UINTPTR)connection);

	/* increment for subsequent accepted connections */
	connection++;

	return ERR_OK;
}

static void FifoRecvHandler(XLlFifo* fifo)
{
	// when fifo receives data from iscsi module
	// send those through tcp open connect
	if (current_tpcb == NULL) {
		xil_printf("Cannot transmitted: no connection\n\r");
		return;
	}

	xil_printf("Ready to send something\n\r");

	u32 data;
	uint32_t i, len;
	while(XLlFifo_iRxOccupancy(fifo)) {
		len = XLlFifo_iRxGetLen(fifo) / 4;
		for (i = 0; i < len; ++i) {
			data = XLlFifo_RxGetWord(fifo);
			tcp_write(current_tpcb, (void*) &data, sizeof(data), 1);
		}
		xil_printf("Transmitting a packet of size %d bytes\n\r", len);
	}
}

void FifoHandler(XLlFifo* fifo)
{
	u32 pending = XLlFifo_IntPending(fifo);
	xil_printf("Receive an interrupt\n\r");
	while (pending) {
		if (pending & XLLF_INT_RC_MASK) {
			FifoRecvHandler(fifo);
			XLlFifo_IntClear(fifo, XLLF_INT_RC_MASK);
		}
		pending = XLlFifo_IntPending(fifo);
	}
}

static int setup_fifo(XLlFifo *fifo, int device_id)
{
	XLlFifo_Config* fifo_config = XLlFfio_LookupConfig(device_id);
	int status = XLlFifo_CfgInitialize(fifo, fifo_config, fifo_config->BaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("Cannot initialize Fifo\n\r");
		return status;
	}

	status = XLlFifo_Status(fifo);
	XLlFifo_IntClear(fifo, 0xffffffff);
	status = XLlFifo_Status(fifo);
	if(status != 0x0) {
		xil_printf("\n ERROR : Reset value of ISR0 : 0x%x\t"
			"Expected : 0x0\n\r", XLlFifo_Status(fifo));
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

static int start_iscsi_module()
{
	int status;
	////// enable both fifos
	// rx
	status = setup_fifo(&rx_fifo, XPAR_AXI_FIFO_MM_S_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Cannot initialize RX Fifo\n\r");
		return status;
	}

	// tx
	status = setup_fifo(&tx_fifo, XPAR_AXI_FIFO_MM_S_1_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Cannot initialize TX Fifo\n\r");
		return status;
	}

	////// enable iscsi module
	XGpio gpio;
	status = XGpio_Initialize(&gpio, XPAR_AXI_GPIO_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Unable to enable ISCSI module\n\r");
		return status;
	}

	XGpio_DiscreteWrite(&gpio, 1, 0xD1);

	return XST_SUCCESS;
}

static int start_application_interrupt()
{
	XScuGic_Config *IntcConfig;

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
				IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XScuGic_SetPriorityTriggerType(IntcInstancePtr, FifoIntrId, 0xA0, 0x3);

	/*
	 * Connect the device driver handler that will be called when an
	 * interrupt for the device occurs, the handler defined above performs
	 * the specific interrupt processing for the device.
	 */
	status = XScuGic_Connect(IntcInstancePtr, FifoIntrId,
				(Xil_InterruptHandler)FifoHandler,
				(void*) &tx_fifo);
	if (status != XST_SUCCESS) {
		return status;
	}

	return XST_SUCCESS;
}

int start_application()
{
	int status;

	///////// START ISCSI MODULE ///////////
	status = start_iscsi_module();
	if (status != XST_SUCCESS) {
		xil_printf("Cannot enable ISCSI module\n\r");
		return status;
	}

	status = start_application_interrupt();

	xil_printf("ISCSI module is enable\n\r");

	///////// START TCP SERVER ///////////
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 3260;

	/* create new TCP PCB structure */
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = tcp_bind(pcb, IP_ANY_TYPE, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* we do not need any arguments to callback functions */
	tcp_arg(pcb, NULL);

	/* listen for connections */
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}

	/* specify callback to use for incoming connections */
	tcp_accept(pcb, accept_callback);

	xil_printf("TCP echo server started @ port %d\n\r", port);

	return 0;
}
