/*
 * Copyright (C) 2009 - 2019 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include <stdio.h>
#include <string.h>

#include "xgpio.h"
#include "xllfifo.h"
#include "xparameters.h"
#include "xstatus.h"
#include "xscugic.h"
#include "xil_exception.h"

#include "lwip/err.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

int transfer_data() {
	return 0;
}

void print_app_header()
{
#if (LWIP_IPV6==0)
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
#else
	xil_printf("\n\r\n\r-----lwIPv6 TCP echo server ------\n\r");
#endif
	xil_printf("TCP packets sent to port 6001 will be echoed back\n\r");
}

err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);

	/* echo back the payload */
	/* in this case, we assume that the payload is < TCP_SND_BUF */
	if (tcp_sndbuf(tpcb) > p->len) {
		err = tcp_write(tpcb, p->payload, p->len, 1);
	} else
		xil_printf("no space in tcp_sndbuf\n\r");

	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
{
	static int connection = 1;

	/* set the receive callback for this connection */
	tcp_recv(newpcb, recv_callback);

	/* just use an integer number indicating the connection id as the
	   callback argument */
	tcp_arg(newpcb, (void*)(UINTPTR)connection);

	/* increment for subsequent accepted connections */
	connection++;

	return ERR_OK;
}

XLlFifo rx_fifo, tx_fifo;

static void FifoRecvHandler(XLlFifo* fifo)
{

}

static void FifoHandler(XLlFifo* fifo)
{
	u32 pending = XLlFifo_IntPending(fifo);
	while (pending) {
		if (pending & XLLF_INT_RC_MASK) {
			FifoRecvHandler(fifo);
		}
		pending = XLlFifo_IntPending(fifo);
	}
}

static int start_iscsi_module()
{
	int status;
	////// enable both fifos
	// rx
	XLlFifo_Config* rx_fifo_config = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_0_DEVICE_ID);
	status = XLlFifo_CfgInitialize(&rx_fifo, rx_fifo_config, rx_fifo_config->BaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("Cannot initialize RX Fifo\n");
		return status;
	}

	// tx
	XLlFifo_Config* tx_fifo_config = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_0_DEVICE_ID);
	status = XLlFifo_CfgInitialize(&tx_fifo, tx_fifo_config, tx_fifo_config->BaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("Cannot initialize TX Fifo\n");
		return status;
	}

	////// enable iscsi module
	xil_printf("Enabling ISCSI module\n");
	XGpio gpio;
	status = XGpio_Initialize(&gpio, XPAR_AXI_GPIO_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Unable to enable ISCSI module\n");
		return status;
	}

	XGpio_DiscreteWrite(&gpio, 1, 0x01);
	return XST_SUCCESS;
}

XScuGic intc;

static int setup_interrupt_system()
{
	int status;
	XScuGic_Config *intc_config = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	status = XScuGic_CfgInitialization(&intc, intc_config, intc_config->CpuBaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("Unable to initialize Scugic driver\n");
		return status;
	}

	return XST_SUCCESS;
}

static int start_interrupt_system()
{
	int status;

	// connect tx to FifoHandler
	XLlFifo* fifo = &tx_fifo;
	XLlFifo_IntClear(fifo, 0xffffffff);

	/*
	 * Connect the Axi Streaming FIFO to the interrupt subsystem such
	 * that interrupts can occur. This function is application specific.
	 */
	Xil_ExceptionRegisterHandler(
			XPAR_FABRIC_LLFIFO_1_VEC_ID,
			(Xil_ExceptionHandler) FifoHandler,
			fifo);

	XLlFifo_IntEnable(fifo, XLLF_INT_ALL_MASK);
	if (status != XST_SUCCESS) {
		xil_printf("Failed interrupt setup\r\n");
		return XST_FAILURE;
	}
	XScuGic_Connect(
			&intc,
			XPAR_FABRIC_LLFIFO_1_VEC_ID,
			(Xil_InterruptHandler) FifoHandler,
			(void*) &tx_fifo);
}

int start_application()
{
	int status;

	///////// START ISCSI MODULE ///////////
	status = start_iscsi_module();
	if (status != XST_SUCCESS) {
		xil_printf("Cannot enable ISCSI module\n");
		return status;
	}

	status = setup_interrupt_system();
	if (status != XST_SUCCESS) {
		xil_printf("Cannot setup interrupt system\n");
		return status;
	}

	status = start_interrupt_system();
	if (status != XST_SUCCESS) {
		xil_printf("Cannot start interrupt system\n");
		return status;
	}

	///////// START TCP SERVER ///////////
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 3260;

	/* create new TCP PCB structure */
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = tcp_bind(pcb, IP_ANY_TYPE, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* we do not need any arguments to callback functions */
	tcp_arg(pcb, NULL);

	/* listen for connections */
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}

	/* specify callback to use for incoming connections */
	tcp_accept(pcb, accept_callback);

	xil_printf("TCP echo server started @ port %d\n\r", port);

	return 0;
}
