-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iscsi_interface is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tcp_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    tcp_in_TVALID : IN STD_LOGIC;
    tcp_in_TREADY : OUT STD_LOGIC;
    tcp_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    tcp_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    tcp_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    tcp_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    tcp_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    tcp_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    tcp_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    tcp_out_TVALID : OUT STD_LOGIC;
    tcp_out_TREADY : IN STD_LOGIC;
    tcp_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    tcp_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    tcp_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    tcp_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    tcp_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    tcp_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of iscsi_interface is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iscsi_interface,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=235,HLS_SYN_LUT=543,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tcp_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal tcp_in_V_data_V_0_vld_in : STD_LOGIC;
    signal tcp_in_V_data_V_0_vld_out : STD_LOGIC;
    signal tcp_in_V_data_V_0_ack_in : STD_LOGIC;
    signal tcp_in_V_data_V_0_ack_out : STD_LOGIC;
    signal tcp_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal tcp_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal tcp_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal tcp_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal tcp_in_V_data_V_0_sel : STD_LOGIC;
    signal tcp_in_V_data_V_0_load_A : STD_LOGIC;
    signal tcp_in_V_data_V_0_load_B : STD_LOGIC;
    signal tcp_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal tcp_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal tcp_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal tcp_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal tcp_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal tcp_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal tcp_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal tcp_in_V_keep_V_0_sel : STD_LOGIC;
    signal tcp_in_V_keep_V_0_load_A : STD_LOGIC;
    signal tcp_in_V_keep_V_0_load_B : STD_LOGIC;
    signal tcp_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal tcp_in_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_in_V_strb_V_0_vld_in : STD_LOGIC;
    signal tcp_in_V_strb_V_0_vld_out : STD_LOGIC;
    signal tcp_in_V_strb_V_0_ack_in : STD_LOGIC;
    signal tcp_in_V_strb_V_0_ack_out : STD_LOGIC;
    signal tcp_in_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_in_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_in_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal tcp_in_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal tcp_in_V_strb_V_0_sel : STD_LOGIC;
    signal tcp_in_V_strb_V_0_load_A : STD_LOGIC;
    signal tcp_in_V_strb_V_0_load_B : STD_LOGIC;
    signal tcp_in_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_in_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal tcp_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_user_V_0_vld_in : STD_LOGIC;
    signal tcp_in_V_user_V_0_vld_out : STD_LOGIC;
    signal tcp_in_V_user_V_0_ack_in : STD_LOGIC;
    signal tcp_in_V_user_V_0_ack_out : STD_LOGIC;
    signal tcp_in_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal tcp_in_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal tcp_in_V_user_V_0_sel : STD_LOGIC;
    signal tcp_in_V_user_V_0_load_A : STD_LOGIC;
    signal tcp_in_V_user_V_0_load_B : STD_LOGIC;
    signal tcp_in_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_in_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal tcp_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_last_V_0_vld_in : STD_LOGIC;
    signal tcp_in_V_last_V_0_vld_out : STD_LOGIC;
    signal tcp_in_V_last_V_0_ack_in : STD_LOGIC;
    signal tcp_in_V_last_V_0_ack_out : STD_LOGIC;
    signal tcp_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal tcp_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal tcp_in_V_last_V_0_sel : STD_LOGIC;
    signal tcp_in_V_last_V_0_load_A : STD_LOGIC;
    signal tcp_in_V_last_V_0_load_B : STD_LOGIC;
    signal tcp_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal tcp_in_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_id_V_0_vld_in : STD_LOGIC;
    signal tcp_in_V_id_V_0_vld_out : STD_LOGIC;
    signal tcp_in_V_id_V_0_ack_in : STD_LOGIC;
    signal tcp_in_V_id_V_0_ack_out : STD_LOGIC;
    signal tcp_in_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal tcp_in_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal tcp_in_V_id_V_0_sel : STD_LOGIC;
    signal tcp_in_V_id_V_0_load_A : STD_LOGIC;
    signal tcp_in_V_id_V_0_load_B : STD_LOGIC;
    signal tcp_in_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_in_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal tcp_in_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_dest_V_0_vld_in : STD_LOGIC;
    signal tcp_in_V_dest_V_0_vld_out : STD_LOGIC;
    signal tcp_in_V_dest_V_0_ack_in : STD_LOGIC;
    signal tcp_in_V_dest_V_0_ack_out : STD_LOGIC;
    signal tcp_in_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_in_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal tcp_in_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal tcp_in_V_dest_V_0_sel : STD_LOGIC;
    signal tcp_in_V_dest_V_0_load_A : STD_LOGIC;
    signal tcp_in_V_dest_V_0_load_B : STD_LOGIC;
    signal tcp_in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_in_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal tcp_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal tcp_out_V_data_V_1_vld_in : STD_LOGIC;
    signal tcp_out_V_data_V_1_vld_out : STD_LOGIC;
    signal tcp_out_V_data_V_1_ack_in : STD_LOGIC;
    signal tcp_out_V_data_V_1_ack_out : STD_LOGIC;
    signal tcp_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal tcp_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal tcp_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal tcp_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal tcp_out_V_data_V_1_sel : STD_LOGIC;
    signal tcp_out_V_data_V_1_load_A : STD_LOGIC;
    signal tcp_out_V_data_V_1_load_B : STD_LOGIC;
    signal tcp_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal tcp_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal tcp_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal tcp_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal tcp_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal tcp_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal tcp_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal tcp_out_V_keep_V_1_sel : STD_LOGIC;
    signal tcp_out_V_keep_V_1_load_A : STD_LOGIC;
    signal tcp_out_V_keep_V_1_load_B : STD_LOGIC;
    signal tcp_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal tcp_out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_out_V_strb_V_1_vld_in : STD_LOGIC;
    signal tcp_out_V_strb_V_1_vld_out : STD_LOGIC;
    signal tcp_out_V_strb_V_1_ack_in : STD_LOGIC;
    signal tcp_out_V_strb_V_1_ack_out : STD_LOGIC;
    signal tcp_out_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_out_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal tcp_out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal tcp_out_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal tcp_out_V_strb_V_1_sel : STD_LOGIC;
    signal tcp_out_V_strb_V_1_load_A : STD_LOGIC;
    signal tcp_out_V_strb_V_1_load_B : STD_LOGIC;
    signal tcp_out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_out_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal tcp_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_user_V_1_vld_in : STD_LOGIC;
    signal tcp_out_V_user_V_1_vld_out : STD_LOGIC;
    signal tcp_out_V_user_V_1_ack_in : STD_LOGIC;
    signal tcp_out_V_user_V_1_ack_out : STD_LOGIC;
    signal tcp_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal tcp_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal tcp_out_V_user_V_1_sel : STD_LOGIC;
    signal tcp_out_V_user_V_1_load_A : STD_LOGIC;
    signal tcp_out_V_user_V_1_load_B : STD_LOGIC;
    signal tcp_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal tcp_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_last_V_1_vld_in : STD_LOGIC;
    signal tcp_out_V_last_V_1_vld_out : STD_LOGIC;
    signal tcp_out_V_last_V_1_ack_in : STD_LOGIC;
    signal tcp_out_V_last_V_1_ack_out : STD_LOGIC;
    signal tcp_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal tcp_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal tcp_out_V_last_V_1_sel : STD_LOGIC;
    signal tcp_out_V_last_V_1_load_A : STD_LOGIC;
    signal tcp_out_V_last_V_1_load_B : STD_LOGIC;
    signal tcp_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal tcp_out_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_id_V_1_vld_in : STD_LOGIC;
    signal tcp_out_V_id_V_1_vld_out : STD_LOGIC;
    signal tcp_out_V_id_V_1_ack_in : STD_LOGIC;
    signal tcp_out_V_id_V_1_ack_out : STD_LOGIC;
    signal tcp_out_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal tcp_out_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal tcp_out_V_id_V_1_sel : STD_LOGIC;
    signal tcp_out_V_id_V_1_load_A : STD_LOGIC;
    signal tcp_out_V_id_V_1_load_B : STD_LOGIC;
    signal tcp_out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_out_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal tcp_out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_dest_V_1_vld_in : STD_LOGIC;
    signal tcp_out_V_dest_V_1_vld_out : STD_LOGIC;
    signal tcp_out_V_dest_V_1_ack_in : STD_LOGIC;
    signal tcp_out_V_dest_V_1_ack_out : STD_LOGIC;
    signal tcp_out_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal tcp_out_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal tcp_out_V_dest_V_1_sel : STD_LOGIC;
    signal tcp_out_V_dest_V_1_load_A : STD_LOGIC;
    signal tcp_out_V_dest_V_1_load_B : STD_LOGIC;
    signal tcp_out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tcp_out_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal tcp_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tcp_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    tcp_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_in_V_data_V_0_ack_out = ap_const_logic_1) and (tcp_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        tcp_in_V_data_V_0_sel_rd <= not(tcp_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_in_V_data_V_0_ack_in = ap_const_logic_1) and (tcp_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        tcp_in_V_data_V_0_sel_wr <= not(tcp_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((tcp_in_V_data_V_0_state = ap_const_lv2_2) and (tcp_in_V_data_V_0_vld_in = ap_const_logic_0)) or ((tcp_in_V_data_V_0_state = ap_const_lv2_3) and (tcp_in_V_data_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    tcp_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((tcp_in_V_data_V_0_state = ap_const_lv2_1) and (tcp_in_V_data_V_0_ack_out = ap_const_logic_0)) or ((tcp_in_V_data_V_0_state = ap_const_lv2_3) and (tcp_in_V_data_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tcp_in_V_data_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((tcp_in_V_data_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_data_V_0_vld_in = ap_const_logic_1))) and (tcp_in_V_data_V_0_state = ap_const_lv2_3)) or ((tcp_in_V_data_V_0_state = ap_const_lv2_1) and (tcp_in_V_data_V_0_ack_out = ap_const_logic_1)) or ((tcp_in_V_data_V_0_state = ap_const_lv2_2) and (tcp_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    tcp_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_in_V_dest_V_0_ack_out = ap_const_logic_1) and (tcp_in_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        tcp_in_V_dest_V_0_sel_rd <= not(tcp_in_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_in_V_dest_V_0_ack_in = ap_const_logic_1) and (tcp_in_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        tcp_in_V_dest_V_0_sel_wr <= not(tcp_in_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((tcp_in_V_dest_V_0_state = ap_const_lv2_2) and (tcp_in_V_dest_V_0_vld_in = ap_const_logic_0)) or ((tcp_in_V_dest_V_0_state = ap_const_lv2_3) and (tcp_in_V_dest_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    tcp_in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((tcp_in_V_dest_V_0_state = ap_const_lv2_1) and (tcp_in_V_dest_V_0_ack_out = ap_const_logic_0)) or ((tcp_in_V_dest_V_0_state = ap_const_lv2_3) and (tcp_in_V_dest_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tcp_in_V_dest_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((tcp_in_V_dest_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_dest_V_0_vld_in = ap_const_logic_1))) and (tcp_in_V_dest_V_0_state = ap_const_lv2_3)) or ((tcp_in_V_dest_V_0_state = ap_const_lv2_1) and (tcp_in_V_dest_V_0_ack_out = ap_const_logic_1)) or ((tcp_in_V_dest_V_0_state = ap_const_lv2_2) and (tcp_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    tcp_in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_in_V_id_V_0_ack_out = ap_const_logic_1) and (tcp_in_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        tcp_in_V_id_V_0_sel_rd <= not(tcp_in_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_in_V_id_V_0_ack_in = ap_const_logic_1) and (tcp_in_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        tcp_in_V_id_V_0_sel_wr <= not(tcp_in_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((tcp_in_V_id_V_0_state = ap_const_lv2_2) and (tcp_in_V_id_V_0_vld_in = ap_const_logic_0)) or ((tcp_in_V_id_V_0_state = ap_const_lv2_3) and (tcp_in_V_id_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    tcp_in_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((tcp_in_V_id_V_0_state = ap_const_lv2_1) and (tcp_in_V_id_V_0_ack_out = ap_const_logic_0)) or ((tcp_in_V_id_V_0_state = ap_const_lv2_3) and (tcp_in_V_id_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tcp_in_V_id_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_id_V_0_ack_out = ap_const_logic_1))) and not(((tcp_in_V_id_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_id_V_0_vld_in = ap_const_logic_1))) and (tcp_in_V_id_V_0_state = ap_const_lv2_3)) or ((tcp_in_V_id_V_0_state = ap_const_lv2_1) and (tcp_in_V_id_V_0_ack_out = ap_const_logic_1)) or ((tcp_in_V_id_V_0_state = ap_const_lv2_2) and (tcp_in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    tcp_in_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_in_V_keep_V_0_ack_out = ap_const_logic_1) and (tcp_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        tcp_in_V_keep_V_0_sel_rd <= not(tcp_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_in_V_keep_V_0_ack_in = ap_const_logic_1) and (tcp_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        tcp_in_V_keep_V_0_sel_wr <= not(tcp_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((tcp_in_V_keep_V_0_state = ap_const_lv2_2) and (tcp_in_V_keep_V_0_vld_in = ap_const_logic_0)) or ((tcp_in_V_keep_V_0_state = ap_const_lv2_3) and (tcp_in_V_keep_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    tcp_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((tcp_in_V_keep_V_0_state = ap_const_lv2_1) and (tcp_in_V_keep_V_0_ack_out = ap_const_logic_0)) or ((tcp_in_V_keep_V_0_state = ap_const_lv2_3) and (tcp_in_V_keep_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tcp_in_V_keep_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((tcp_in_V_keep_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (tcp_in_V_keep_V_0_state = ap_const_lv2_3)) or ((tcp_in_V_keep_V_0_state = ap_const_lv2_1) and (tcp_in_V_keep_V_0_ack_out = ap_const_logic_1)) or ((tcp_in_V_keep_V_0_state = ap_const_lv2_2) and (tcp_in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    tcp_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_in_V_last_V_0_ack_out = ap_const_logic_1) and (tcp_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        tcp_in_V_last_V_0_sel_rd <= not(tcp_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_in_V_last_V_0_ack_in = ap_const_logic_1) and (tcp_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        tcp_in_V_last_V_0_sel_wr <= not(tcp_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((tcp_in_V_last_V_0_state = ap_const_lv2_2) and (tcp_in_V_last_V_0_vld_in = ap_const_logic_0)) or ((tcp_in_V_last_V_0_state = ap_const_lv2_3) and (tcp_in_V_last_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    tcp_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((tcp_in_V_last_V_0_state = ap_const_lv2_1) and (tcp_in_V_last_V_0_ack_out = ap_const_logic_0)) or ((tcp_in_V_last_V_0_state = ap_const_lv2_3) and (tcp_in_V_last_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tcp_in_V_last_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((tcp_in_V_last_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_last_V_0_vld_in = ap_const_logic_1))) and (tcp_in_V_last_V_0_state = ap_const_lv2_3)) or ((tcp_in_V_last_V_0_state = ap_const_lv2_1) and (tcp_in_V_last_V_0_ack_out = ap_const_logic_1)) or ((tcp_in_V_last_V_0_state = ap_const_lv2_2) and (tcp_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    tcp_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_in_V_strb_V_0_ack_out = ap_const_logic_1) and (tcp_in_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        tcp_in_V_strb_V_0_sel_rd <= not(tcp_in_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_in_V_strb_V_0_ack_in = ap_const_logic_1) and (tcp_in_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        tcp_in_V_strb_V_0_sel_wr <= not(tcp_in_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((tcp_in_V_strb_V_0_state = ap_const_lv2_2) and (tcp_in_V_strb_V_0_vld_in = ap_const_logic_0)) or ((tcp_in_V_strb_V_0_state = ap_const_lv2_3) and (tcp_in_V_strb_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    tcp_in_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((tcp_in_V_strb_V_0_state = ap_const_lv2_1) and (tcp_in_V_strb_V_0_ack_out = ap_const_logic_0)) or ((tcp_in_V_strb_V_0_state = ap_const_lv2_3) and (tcp_in_V_strb_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tcp_in_V_strb_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((tcp_in_V_strb_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_strb_V_0_vld_in = ap_const_logic_1))) and (tcp_in_V_strb_V_0_state = ap_const_lv2_3)) or ((tcp_in_V_strb_V_0_state = ap_const_lv2_1) and (tcp_in_V_strb_V_0_ack_out = ap_const_logic_1)) or ((tcp_in_V_strb_V_0_state = ap_const_lv2_2) and (tcp_in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    tcp_in_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_in_V_user_V_0_ack_out = ap_const_logic_1) and (tcp_in_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        tcp_in_V_user_V_0_sel_rd <= not(tcp_in_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_in_V_user_V_0_ack_in = ap_const_logic_1) and (tcp_in_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        tcp_in_V_user_V_0_sel_wr <= not(tcp_in_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_in_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_in_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((tcp_in_V_user_V_0_state = ap_const_lv2_2) and (tcp_in_V_user_V_0_vld_in = ap_const_logic_0)) or ((tcp_in_V_user_V_0_state = ap_const_lv2_3) and (tcp_in_V_user_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    tcp_in_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((tcp_in_V_user_V_0_state = ap_const_lv2_1) and (tcp_in_V_user_V_0_ack_out = ap_const_logic_0)) or ((tcp_in_V_user_V_0_state = ap_const_lv2_3) and (tcp_in_V_user_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tcp_in_V_user_V_0_vld_in = ap_const_logic_0) and (tcp_in_V_user_V_0_ack_out = ap_const_logic_1))) and not(((tcp_in_V_user_V_0_ack_out = ap_const_logic_0) and (tcp_in_V_user_V_0_vld_in = ap_const_logic_1))) and (tcp_in_V_user_V_0_state = ap_const_lv2_3)) or ((tcp_in_V_user_V_0_state = ap_const_lv2_1) and (tcp_in_V_user_V_0_ack_out = ap_const_logic_1)) or ((tcp_in_V_user_V_0_state = ap_const_lv2_2) and (tcp_in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    tcp_in_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    tcp_in_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_out_V_data_V_1_ack_out = ap_const_logic_1) and (tcp_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        tcp_out_V_data_V_1_sel_rd <= not(tcp_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_out_V_data_V_1_ack_in = ap_const_logic_1) and (tcp_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        tcp_out_V_data_V_1_sel_wr <= not(tcp_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((tcp_out_V_data_V_1_state = ap_const_lv2_2) and (tcp_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((tcp_out_V_data_V_1_state = ap_const_lv2_3) and (tcp_out_V_data_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    tcp_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((tcp_out_V_data_V_1_state = ap_const_lv2_1) and (tcp_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((tcp_out_V_data_V_1_state = ap_const_lv2_3) and (tcp_out_V_data_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tcp_out_V_data_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((tcp_out_V_data_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_data_V_1_vld_in = ap_const_logic_1))) and (tcp_out_V_data_V_1_state = ap_const_lv2_3)) or ((tcp_out_V_data_V_1_state = ap_const_lv2_1) and (tcp_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((tcp_out_V_data_V_1_state = ap_const_lv2_2) and (tcp_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    tcp_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_out_V_dest_V_1_ack_out = ap_const_logic_1) and (tcp_out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        tcp_out_V_dest_V_1_sel_rd <= not(tcp_out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_out_V_dest_V_1_ack_in = ap_const_logic_1) and (tcp_out_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        tcp_out_V_dest_V_1_sel_wr <= not(tcp_out_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((tcp_out_V_dest_V_1_state = ap_const_lv2_2) and (tcp_out_V_dest_V_1_vld_in = ap_const_logic_0)) or ((tcp_out_V_dest_V_1_state = ap_const_lv2_3) and (tcp_out_V_dest_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    tcp_out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((tcp_out_V_dest_V_1_state = ap_const_lv2_1) and (tcp_out_V_dest_V_1_ack_out = ap_const_logic_0)) or ((tcp_out_V_dest_V_1_state = ap_const_lv2_3) and (tcp_out_V_dest_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tcp_out_V_dest_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((tcp_out_V_dest_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_dest_V_1_vld_in = ap_const_logic_1))) and (tcp_out_V_dest_V_1_state = ap_const_lv2_3)) or ((tcp_out_V_dest_V_1_state = ap_const_lv2_1) and (tcp_out_V_dest_V_1_ack_out = ap_const_logic_1)) or ((tcp_out_V_dest_V_1_state = ap_const_lv2_2) and (tcp_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    tcp_out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_out_V_id_V_1_ack_out = ap_const_logic_1) and (tcp_out_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        tcp_out_V_id_V_1_sel_rd <= not(tcp_out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_out_V_id_V_1_ack_in = ap_const_logic_1) and (tcp_out_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        tcp_out_V_id_V_1_sel_wr <= not(tcp_out_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((tcp_out_V_id_V_1_state = ap_const_lv2_2) and (tcp_out_V_id_V_1_vld_in = ap_const_logic_0)) or ((tcp_out_V_id_V_1_state = ap_const_lv2_3) and (tcp_out_V_id_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    tcp_out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((tcp_out_V_id_V_1_state = ap_const_lv2_1) and (tcp_out_V_id_V_1_ack_out = ap_const_logic_0)) or ((tcp_out_V_id_V_1_state = ap_const_lv2_3) and (tcp_out_V_id_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tcp_out_V_id_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((tcp_out_V_id_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_id_V_1_vld_in = ap_const_logic_1))) and (tcp_out_V_id_V_1_state = ap_const_lv2_3)) or ((tcp_out_V_id_V_1_state = ap_const_lv2_1) and (tcp_out_V_id_V_1_ack_out = ap_const_logic_1)) or ((tcp_out_V_id_V_1_state = ap_const_lv2_2) and (tcp_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    tcp_out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_out_V_keep_V_1_ack_out = ap_const_logic_1) and (tcp_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        tcp_out_V_keep_V_1_sel_rd <= not(tcp_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_out_V_keep_V_1_ack_in = ap_const_logic_1) and (tcp_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        tcp_out_V_keep_V_1_sel_wr <= not(tcp_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((tcp_out_V_keep_V_1_state = ap_const_lv2_2) and (tcp_out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((tcp_out_V_keep_V_1_state = ap_const_lv2_3) and (tcp_out_V_keep_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    tcp_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((tcp_out_V_keep_V_1_state = ap_const_lv2_1) and (tcp_out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((tcp_out_V_keep_V_1_state = ap_const_lv2_3) and (tcp_out_V_keep_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tcp_out_V_keep_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((tcp_out_V_keep_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (tcp_out_V_keep_V_1_state = ap_const_lv2_3)) or ((tcp_out_V_keep_V_1_state = ap_const_lv2_1) and (tcp_out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((tcp_out_V_keep_V_1_state = ap_const_lv2_2) and (tcp_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    tcp_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_out_V_last_V_1_ack_out = ap_const_logic_1) and (tcp_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        tcp_out_V_last_V_1_sel_rd <= not(tcp_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_out_V_last_V_1_ack_in = ap_const_logic_1) and (tcp_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        tcp_out_V_last_V_1_sel_wr <= not(tcp_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((tcp_out_V_last_V_1_state = ap_const_lv2_2) and (tcp_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((tcp_out_V_last_V_1_state = ap_const_lv2_3) and (tcp_out_V_last_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    tcp_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((tcp_out_V_last_V_1_state = ap_const_lv2_1) and (tcp_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((tcp_out_V_last_V_1_state = ap_const_lv2_3) and (tcp_out_V_last_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tcp_out_V_last_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((tcp_out_V_last_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_last_V_1_vld_in = ap_const_logic_1))) and (tcp_out_V_last_V_1_state = ap_const_lv2_3)) or ((tcp_out_V_last_V_1_state = ap_const_lv2_1) and (tcp_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((tcp_out_V_last_V_1_state = ap_const_lv2_2) and (tcp_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    tcp_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_out_V_strb_V_1_ack_out = ap_const_logic_1) and (tcp_out_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        tcp_out_V_strb_V_1_sel_rd <= not(tcp_out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_out_V_strb_V_1_ack_in = ap_const_logic_1) and (tcp_out_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        tcp_out_V_strb_V_1_sel_wr <= not(tcp_out_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((tcp_out_V_strb_V_1_state = ap_const_lv2_2) and (tcp_out_V_strb_V_1_vld_in = ap_const_logic_0)) or ((tcp_out_V_strb_V_1_state = ap_const_lv2_3) and (tcp_out_V_strb_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    tcp_out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((tcp_out_V_strb_V_1_state = ap_const_lv2_1) and (tcp_out_V_strb_V_1_ack_out = ap_const_logic_0)) or ((tcp_out_V_strb_V_1_state = ap_const_lv2_3) and (tcp_out_V_strb_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tcp_out_V_strb_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((tcp_out_V_strb_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_strb_V_1_vld_in = ap_const_logic_1))) and (tcp_out_V_strb_V_1_state = ap_const_lv2_3)) or ((tcp_out_V_strb_V_1_state = ap_const_lv2_1) and (tcp_out_V_strb_V_1_ack_out = ap_const_logic_1)) or ((tcp_out_V_strb_V_1_state = ap_const_lv2_2) and (tcp_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    tcp_out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tcp_out_V_user_V_1_ack_out = ap_const_logic_1) and (tcp_out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        tcp_out_V_user_V_1_sel_rd <= not(tcp_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tcp_out_V_user_V_1_ack_in = ap_const_logic_1) and (tcp_out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        tcp_out_V_user_V_1_sel_wr <= not(tcp_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tcp_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tcp_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((tcp_out_V_user_V_1_state = ap_const_lv2_2) and (tcp_out_V_user_V_1_vld_in = ap_const_logic_0)) or ((tcp_out_V_user_V_1_state = ap_const_lv2_3) and (tcp_out_V_user_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    tcp_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((tcp_out_V_user_V_1_state = ap_const_lv2_1) and (tcp_out_V_user_V_1_ack_out = ap_const_logic_0)) or ((tcp_out_V_user_V_1_state = ap_const_lv2_3) and (tcp_out_V_user_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tcp_out_V_user_V_1_vld_in = ap_const_logic_0) and (tcp_out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((tcp_out_V_user_V_1_ack_out = ap_const_logic_0) and (tcp_out_V_user_V_1_vld_in = ap_const_logic_1))) and (tcp_out_V_user_V_1_state = ap_const_lv2_3)) or ((tcp_out_V_user_V_1_state = ap_const_lv2_1) and (tcp_out_V_user_V_1_ack_out = ap_const_logic_1)) or ((tcp_out_V_user_V_1_state = ap_const_lv2_2) and (tcp_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    tcp_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    tcp_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_data_V_0_load_A = ap_const_logic_1)) then
                tcp_in_V_data_V_0_payload_A <= tcp_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_data_V_0_load_B = ap_const_logic_1)) then
                tcp_in_V_data_V_0_payload_B <= tcp_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_dest_V_0_load_A = ap_const_logic_1)) then
                tcp_in_V_dest_V_0_payload_A <= tcp_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_dest_V_0_load_B = ap_const_logic_1)) then
                tcp_in_V_dest_V_0_payload_B <= tcp_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_id_V_0_load_A = ap_const_logic_1)) then
                tcp_in_V_id_V_0_payload_A <= tcp_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_id_V_0_load_B = ap_const_logic_1)) then
                tcp_in_V_id_V_0_payload_B <= tcp_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                tcp_in_V_keep_V_0_payload_A <= tcp_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                tcp_in_V_keep_V_0_payload_B <= tcp_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_last_V_0_load_A = ap_const_logic_1)) then
                tcp_in_V_last_V_0_payload_A <= tcp_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_last_V_0_load_B = ap_const_logic_1)) then
                tcp_in_V_last_V_0_payload_B <= tcp_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_strb_V_0_load_A = ap_const_logic_1)) then
                tcp_in_V_strb_V_0_payload_A <= tcp_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_strb_V_0_load_B = ap_const_logic_1)) then
                tcp_in_V_strb_V_0_payload_B <= tcp_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_user_V_0_load_A = ap_const_logic_1)) then
                tcp_in_V_user_V_0_payload_A <= tcp_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_in_V_user_V_0_load_B = ap_const_logic_1)) then
                tcp_in_V_user_V_0_payload_B <= tcp_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_data_V_1_load_A = ap_const_logic_1)) then
                tcp_out_V_data_V_1_payload_A <= tcp_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_data_V_1_load_B = ap_const_logic_1)) then
                tcp_out_V_data_V_1_payload_B <= tcp_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_dest_V_1_load_A = ap_const_logic_1)) then
                tcp_out_V_dest_V_1_payload_A <= tcp_in_V_dest_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_dest_V_1_load_B = ap_const_logic_1)) then
                tcp_out_V_dest_V_1_payload_B <= tcp_in_V_dest_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_id_V_1_load_A = ap_const_logic_1)) then
                tcp_out_V_id_V_1_payload_A <= tcp_in_V_id_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_id_V_1_load_B = ap_const_logic_1)) then
                tcp_out_V_id_V_1_payload_B <= tcp_in_V_id_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                tcp_out_V_keep_V_1_payload_A <= tcp_in_V_keep_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                tcp_out_V_keep_V_1_payload_B <= tcp_in_V_keep_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_last_V_1_load_A = ap_const_logic_1)) then
                tcp_out_V_last_V_1_payload_A <= tcp_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_last_V_1_load_B = ap_const_logic_1)) then
                tcp_out_V_last_V_1_payload_B <= tcp_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_strb_V_1_load_A = ap_const_logic_1)) then
                tcp_out_V_strb_V_1_payload_A <= tcp_in_V_strb_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_strb_V_1_load_B = ap_const_logic_1)) then
                tcp_out_V_strb_V_1_payload_B <= tcp_in_V_strb_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_user_V_1_load_A = ap_const_logic_1)) then
                tcp_out_V_user_V_1_payload_A <= tcp_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tcp_out_V_user_V_1_load_B = ap_const_logic_1)) then
                tcp_out_V_user_V_1_payload_B <= tcp_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tcp_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_done <= ap_const_logic_0;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    tcp_in_TDATA_blk_n_assign_proc : process(tcp_in_V_data_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tcp_in_TDATA_blk_n <= tcp_in_V_data_V_0_state(0);
        else 
            tcp_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tcp_in_TREADY <= tcp_in_V_dest_V_0_state(1);
    tcp_in_V_data_V_0_ack_in <= tcp_in_V_data_V_0_state(1);

    tcp_in_V_data_V_0_ack_out_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            tcp_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tcp_in_V_data_V_0_data_out_assign_proc : process(tcp_in_V_data_V_0_payload_A, tcp_in_V_data_V_0_payload_B, tcp_in_V_data_V_0_sel)
    begin
        if ((tcp_in_V_data_V_0_sel = ap_const_logic_1)) then 
            tcp_in_V_data_V_0_data_out <= tcp_in_V_data_V_0_payload_B;
        else 
            tcp_in_V_data_V_0_data_out <= tcp_in_V_data_V_0_payload_A;
        end if; 
    end process;

    tcp_in_V_data_V_0_load_A <= (tcp_in_V_data_V_0_state_cmp_full and not(tcp_in_V_data_V_0_sel_wr));
    tcp_in_V_data_V_0_load_B <= (tcp_in_V_data_V_0_state_cmp_full and tcp_in_V_data_V_0_sel_wr);
    tcp_in_V_data_V_0_sel <= tcp_in_V_data_V_0_sel_rd;
    tcp_in_V_data_V_0_state_cmp_full <= '0' when (tcp_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    tcp_in_V_data_V_0_vld_in <= tcp_in_TVALID;
    tcp_in_V_data_V_0_vld_out <= tcp_in_V_data_V_0_state(0);
    tcp_in_V_dest_V_0_ack_in <= tcp_in_V_dest_V_0_state(1);

    tcp_in_V_dest_V_0_ack_out_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_in_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            tcp_in_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tcp_in_V_dest_V_0_data_out_assign_proc : process(tcp_in_V_dest_V_0_payload_A, tcp_in_V_dest_V_0_payload_B, tcp_in_V_dest_V_0_sel)
    begin
        if ((tcp_in_V_dest_V_0_sel = ap_const_logic_1)) then 
            tcp_in_V_dest_V_0_data_out <= tcp_in_V_dest_V_0_payload_B;
        else 
            tcp_in_V_dest_V_0_data_out <= tcp_in_V_dest_V_0_payload_A;
        end if; 
    end process;

    tcp_in_V_dest_V_0_load_A <= (tcp_in_V_dest_V_0_state_cmp_full and not(tcp_in_V_dest_V_0_sel_wr));
    tcp_in_V_dest_V_0_load_B <= (tcp_in_V_dest_V_0_state_cmp_full and tcp_in_V_dest_V_0_sel_wr);
    tcp_in_V_dest_V_0_sel <= tcp_in_V_dest_V_0_sel_rd;
    tcp_in_V_dest_V_0_state_cmp_full <= '0' when (tcp_in_V_dest_V_0_state = ap_const_lv2_1) else '1';
    tcp_in_V_dest_V_0_vld_in <= tcp_in_TVALID;
    tcp_in_V_dest_V_0_vld_out <= tcp_in_V_dest_V_0_state(0);
    tcp_in_V_id_V_0_ack_in <= tcp_in_V_id_V_0_state(1);

    tcp_in_V_id_V_0_ack_out_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_in_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            tcp_in_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tcp_in_V_id_V_0_data_out_assign_proc : process(tcp_in_V_id_V_0_payload_A, tcp_in_V_id_V_0_payload_B, tcp_in_V_id_V_0_sel)
    begin
        if ((tcp_in_V_id_V_0_sel = ap_const_logic_1)) then 
            tcp_in_V_id_V_0_data_out <= tcp_in_V_id_V_0_payload_B;
        else 
            tcp_in_V_id_V_0_data_out <= tcp_in_V_id_V_0_payload_A;
        end if; 
    end process;

    tcp_in_V_id_V_0_load_A <= (tcp_in_V_id_V_0_state_cmp_full and not(tcp_in_V_id_V_0_sel_wr));
    tcp_in_V_id_V_0_load_B <= (tcp_in_V_id_V_0_state_cmp_full and tcp_in_V_id_V_0_sel_wr);
    tcp_in_V_id_V_0_sel <= tcp_in_V_id_V_0_sel_rd;
    tcp_in_V_id_V_0_state_cmp_full <= '0' when (tcp_in_V_id_V_0_state = ap_const_lv2_1) else '1';
    tcp_in_V_id_V_0_vld_in <= tcp_in_TVALID;
    tcp_in_V_id_V_0_vld_out <= tcp_in_V_id_V_0_state(0);
    tcp_in_V_keep_V_0_ack_in <= tcp_in_V_keep_V_0_state(1);

    tcp_in_V_keep_V_0_ack_out_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            tcp_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tcp_in_V_keep_V_0_data_out_assign_proc : process(tcp_in_V_keep_V_0_payload_A, tcp_in_V_keep_V_0_payload_B, tcp_in_V_keep_V_0_sel)
    begin
        if ((tcp_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            tcp_in_V_keep_V_0_data_out <= tcp_in_V_keep_V_0_payload_B;
        else 
            tcp_in_V_keep_V_0_data_out <= tcp_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    tcp_in_V_keep_V_0_load_A <= (tcp_in_V_keep_V_0_state_cmp_full and not(tcp_in_V_keep_V_0_sel_wr));
    tcp_in_V_keep_V_0_load_B <= (tcp_in_V_keep_V_0_state_cmp_full and tcp_in_V_keep_V_0_sel_wr);
    tcp_in_V_keep_V_0_sel <= tcp_in_V_keep_V_0_sel_rd;
    tcp_in_V_keep_V_0_state_cmp_full <= '0' when (tcp_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    tcp_in_V_keep_V_0_vld_in <= tcp_in_TVALID;
    tcp_in_V_keep_V_0_vld_out <= tcp_in_V_keep_V_0_state(0);
    tcp_in_V_last_V_0_ack_in <= tcp_in_V_last_V_0_state(1);

    tcp_in_V_last_V_0_ack_out_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            tcp_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tcp_in_V_last_V_0_data_out_assign_proc : process(tcp_in_V_last_V_0_payload_A, tcp_in_V_last_V_0_payload_B, tcp_in_V_last_V_0_sel)
    begin
        if ((tcp_in_V_last_V_0_sel = ap_const_logic_1)) then 
            tcp_in_V_last_V_0_data_out <= tcp_in_V_last_V_0_payload_B;
        else 
            tcp_in_V_last_V_0_data_out <= tcp_in_V_last_V_0_payload_A;
        end if; 
    end process;

    tcp_in_V_last_V_0_load_A <= (tcp_in_V_last_V_0_state_cmp_full and not(tcp_in_V_last_V_0_sel_wr));
    tcp_in_V_last_V_0_load_B <= (tcp_in_V_last_V_0_state_cmp_full and tcp_in_V_last_V_0_sel_wr);
    tcp_in_V_last_V_0_sel <= tcp_in_V_last_V_0_sel_rd;
    tcp_in_V_last_V_0_state_cmp_full <= '0' when (tcp_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    tcp_in_V_last_V_0_vld_in <= tcp_in_TVALID;
    tcp_in_V_last_V_0_vld_out <= tcp_in_V_last_V_0_state(0);
    tcp_in_V_strb_V_0_ack_in <= tcp_in_V_strb_V_0_state(1);

    tcp_in_V_strb_V_0_ack_out_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_in_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            tcp_in_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tcp_in_V_strb_V_0_data_out_assign_proc : process(tcp_in_V_strb_V_0_payload_A, tcp_in_V_strb_V_0_payload_B, tcp_in_V_strb_V_0_sel)
    begin
        if ((tcp_in_V_strb_V_0_sel = ap_const_logic_1)) then 
            tcp_in_V_strb_V_0_data_out <= tcp_in_V_strb_V_0_payload_B;
        else 
            tcp_in_V_strb_V_0_data_out <= tcp_in_V_strb_V_0_payload_A;
        end if; 
    end process;

    tcp_in_V_strb_V_0_load_A <= (tcp_in_V_strb_V_0_state_cmp_full and not(tcp_in_V_strb_V_0_sel_wr));
    tcp_in_V_strb_V_0_load_B <= (tcp_in_V_strb_V_0_state_cmp_full and tcp_in_V_strb_V_0_sel_wr);
    tcp_in_V_strb_V_0_sel <= tcp_in_V_strb_V_0_sel_rd;
    tcp_in_V_strb_V_0_state_cmp_full <= '0' when (tcp_in_V_strb_V_0_state = ap_const_lv2_1) else '1';
    tcp_in_V_strb_V_0_vld_in <= tcp_in_TVALID;
    tcp_in_V_strb_V_0_vld_out <= tcp_in_V_strb_V_0_state(0);
    tcp_in_V_user_V_0_ack_in <= tcp_in_V_user_V_0_state(1);

    tcp_in_V_user_V_0_ack_out_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            tcp_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tcp_in_V_user_V_0_data_out_assign_proc : process(tcp_in_V_user_V_0_payload_A, tcp_in_V_user_V_0_payload_B, tcp_in_V_user_V_0_sel)
    begin
        if ((tcp_in_V_user_V_0_sel = ap_const_logic_1)) then 
            tcp_in_V_user_V_0_data_out <= tcp_in_V_user_V_0_payload_B;
        else 
            tcp_in_V_user_V_0_data_out <= tcp_in_V_user_V_0_payload_A;
        end if; 
    end process;

    tcp_in_V_user_V_0_load_A <= (tcp_in_V_user_V_0_state_cmp_full and not(tcp_in_V_user_V_0_sel_wr));
    tcp_in_V_user_V_0_load_B <= (tcp_in_V_user_V_0_state_cmp_full and tcp_in_V_user_V_0_sel_wr);
    tcp_in_V_user_V_0_sel <= tcp_in_V_user_V_0_sel_rd;
    tcp_in_V_user_V_0_state_cmp_full <= '0' when (tcp_in_V_user_V_0_state = ap_const_lv2_1) else '1';
    tcp_in_V_user_V_0_vld_in <= tcp_in_TVALID;
    tcp_in_V_user_V_0_vld_out <= tcp_in_V_user_V_0_state(0);
    tcp_out_TDATA <= tcp_out_V_data_V_1_data_out;

    tcp_out_TDATA_blk_n_assign_proc : process(tcp_out_V_data_V_1_state, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_TDATA_blk_n <= tcp_out_V_data_V_1_state(1);
        else 
            tcp_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tcp_out_TDEST <= tcp_out_V_dest_V_1_data_out;
    tcp_out_TID <= tcp_out_V_id_V_1_data_out;
    tcp_out_TKEEP <= tcp_out_V_keep_V_1_data_out;
    tcp_out_TLAST <= tcp_out_V_last_V_1_data_out;
    tcp_out_TSTRB <= tcp_out_V_strb_V_1_data_out;
    tcp_out_TUSER <= tcp_out_V_user_V_1_data_out;
    tcp_out_TVALID <= tcp_out_V_dest_V_1_state(0);
    tcp_out_V_data_V_1_ack_in <= tcp_out_V_data_V_1_state(1);
    tcp_out_V_data_V_1_ack_out <= tcp_out_TREADY;

    tcp_out_V_data_V_1_data_out_assign_proc : process(tcp_out_V_data_V_1_payload_A, tcp_out_V_data_V_1_payload_B, tcp_out_V_data_V_1_sel)
    begin
        if ((tcp_out_V_data_V_1_sel = ap_const_logic_1)) then 
            tcp_out_V_data_V_1_data_out <= tcp_out_V_data_V_1_payload_B;
        else 
            tcp_out_V_data_V_1_data_out <= tcp_out_V_data_V_1_payload_A;
        end if; 
    end process;

    tcp_out_V_data_V_1_load_A <= (tcp_out_V_data_V_1_state_cmp_full and not(tcp_out_V_data_V_1_sel_wr));
    tcp_out_V_data_V_1_load_B <= (tcp_out_V_data_V_1_state_cmp_full and tcp_out_V_data_V_1_sel_wr);
    tcp_out_V_data_V_1_sel <= tcp_out_V_data_V_1_sel_rd;
    tcp_out_V_data_V_1_state_cmp_full <= '0' when (tcp_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    tcp_out_V_data_V_1_vld_in_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            tcp_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_data_V_1_vld_out <= tcp_out_V_data_V_1_state(0);
    tcp_out_V_dest_V_1_ack_in <= tcp_out_V_dest_V_1_state(1);
    tcp_out_V_dest_V_1_ack_out <= tcp_out_TREADY;

    tcp_out_V_dest_V_1_data_out_assign_proc : process(tcp_out_V_dest_V_1_payload_A, tcp_out_V_dest_V_1_payload_B, tcp_out_V_dest_V_1_sel)
    begin
        if ((tcp_out_V_dest_V_1_sel = ap_const_logic_1)) then 
            tcp_out_V_dest_V_1_data_out <= tcp_out_V_dest_V_1_payload_B;
        else 
            tcp_out_V_dest_V_1_data_out <= tcp_out_V_dest_V_1_payload_A;
        end if; 
    end process;

    tcp_out_V_dest_V_1_load_A <= (tcp_out_V_dest_V_1_state_cmp_full and not(tcp_out_V_dest_V_1_sel_wr));
    tcp_out_V_dest_V_1_load_B <= (tcp_out_V_dest_V_1_state_cmp_full and tcp_out_V_dest_V_1_sel_wr);
    tcp_out_V_dest_V_1_sel <= tcp_out_V_dest_V_1_sel_rd;
    tcp_out_V_dest_V_1_state_cmp_full <= '0' when (tcp_out_V_dest_V_1_state = ap_const_lv2_1) else '1';

    tcp_out_V_dest_V_1_vld_in_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            tcp_out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_dest_V_1_vld_out <= tcp_out_V_dest_V_1_state(0);
    tcp_out_V_id_V_1_ack_in <= tcp_out_V_id_V_1_state(1);
    tcp_out_V_id_V_1_ack_out <= tcp_out_TREADY;

    tcp_out_V_id_V_1_data_out_assign_proc : process(tcp_out_V_id_V_1_payload_A, tcp_out_V_id_V_1_payload_B, tcp_out_V_id_V_1_sel)
    begin
        if ((tcp_out_V_id_V_1_sel = ap_const_logic_1)) then 
            tcp_out_V_id_V_1_data_out <= tcp_out_V_id_V_1_payload_B;
        else 
            tcp_out_V_id_V_1_data_out <= tcp_out_V_id_V_1_payload_A;
        end if; 
    end process;

    tcp_out_V_id_V_1_load_A <= (tcp_out_V_id_V_1_state_cmp_full and not(tcp_out_V_id_V_1_sel_wr));
    tcp_out_V_id_V_1_load_B <= (tcp_out_V_id_V_1_state_cmp_full and tcp_out_V_id_V_1_sel_wr);
    tcp_out_V_id_V_1_sel <= tcp_out_V_id_V_1_sel_rd;
    tcp_out_V_id_V_1_state_cmp_full <= '0' when (tcp_out_V_id_V_1_state = ap_const_lv2_1) else '1';

    tcp_out_V_id_V_1_vld_in_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            tcp_out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_id_V_1_vld_out <= tcp_out_V_id_V_1_state(0);
    tcp_out_V_keep_V_1_ack_in <= tcp_out_V_keep_V_1_state(1);
    tcp_out_V_keep_V_1_ack_out <= tcp_out_TREADY;

    tcp_out_V_keep_V_1_data_out_assign_proc : process(tcp_out_V_keep_V_1_payload_A, tcp_out_V_keep_V_1_payload_B, tcp_out_V_keep_V_1_sel)
    begin
        if ((tcp_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            tcp_out_V_keep_V_1_data_out <= tcp_out_V_keep_V_1_payload_B;
        else 
            tcp_out_V_keep_V_1_data_out <= tcp_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    tcp_out_V_keep_V_1_load_A <= (tcp_out_V_keep_V_1_state_cmp_full and not(tcp_out_V_keep_V_1_sel_wr));
    tcp_out_V_keep_V_1_load_B <= (tcp_out_V_keep_V_1_state_cmp_full and tcp_out_V_keep_V_1_sel_wr);
    tcp_out_V_keep_V_1_sel <= tcp_out_V_keep_V_1_sel_rd;
    tcp_out_V_keep_V_1_state_cmp_full <= '0' when (tcp_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    tcp_out_V_keep_V_1_vld_in_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            tcp_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_keep_V_1_vld_out <= tcp_out_V_keep_V_1_state(0);
    tcp_out_V_last_V_1_ack_in <= tcp_out_V_last_V_1_state(1);
    tcp_out_V_last_V_1_ack_out <= tcp_out_TREADY;

    tcp_out_V_last_V_1_data_out_assign_proc : process(tcp_out_V_last_V_1_payload_A, tcp_out_V_last_V_1_payload_B, tcp_out_V_last_V_1_sel)
    begin
        if ((tcp_out_V_last_V_1_sel = ap_const_logic_1)) then 
            tcp_out_V_last_V_1_data_out <= tcp_out_V_last_V_1_payload_B;
        else 
            tcp_out_V_last_V_1_data_out <= tcp_out_V_last_V_1_payload_A;
        end if; 
    end process;

    tcp_out_V_last_V_1_load_A <= (tcp_out_V_last_V_1_state_cmp_full and not(tcp_out_V_last_V_1_sel_wr));
    tcp_out_V_last_V_1_load_B <= (tcp_out_V_last_V_1_state_cmp_full and tcp_out_V_last_V_1_sel_wr);
    tcp_out_V_last_V_1_sel <= tcp_out_V_last_V_1_sel_rd;
    tcp_out_V_last_V_1_state_cmp_full <= '0' when (tcp_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    tcp_out_V_last_V_1_vld_in_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            tcp_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_last_V_1_vld_out <= tcp_out_V_last_V_1_state(0);
    tcp_out_V_strb_V_1_ack_in <= tcp_out_V_strb_V_1_state(1);
    tcp_out_V_strb_V_1_ack_out <= tcp_out_TREADY;

    tcp_out_V_strb_V_1_data_out_assign_proc : process(tcp_out_V_strb_V_1_payload_A, tcp_out_V_strb_V_1_payload_B, tcp_out_V_strb_V_1_sel)
    begin
        if ((tcp_out_V_strb_V_1_sel = ap_const_logic_1)) then 
            tcp_out_V_strb_V_1_data_out <= tcp_out_V_strb_V_1_payload_B;
        else 
            tcp_out_V_strb_V_1_data_out <= tcp_out_V_strb_V_1_payload_A;
        end if; 
    end process;

    tcp_out_V_strb_V_1_load_A <= (tcp_out_V_strb_V_1_state_cmp_full and not(tcp_out_V_strb_V_1_sel_wr));
    tcp_out_V_strb_V_1_load_B <= (tcp_out_V_strb_V_1_state_cmp_full and tcp_out_V_strb_V_1_sel_wr);
    tcp_out_V_strb_V_1_sel <= tcp_out_V_strb_V_1_sel_rd;
    tcp_out_V_strb_V_1_state_cmp_full <= '0' when (tcp_out_V_strb_V_1_state = ap_const_lv2_1) else '1';

    tcp_out_V_strb_V_1_vld_in_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            tcp_out_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_strb_V_1_vld_out <= tcp_out_V_strb_V_1_state(0);
    tcp_out_V_user_V_1_ack_in <= tcp_out_V_user_V_1_state(1);
    tcp_out_V_user_V_1_ack_out <= tcp_out_TREADY;

    tcp_out_V_user_V_1_data_out_assign_proc : process(tcp_out_V_user_V_1_payload_A, tcp_out_V_user_V_1_payload_B, tcp_out_V_user_V_1_sel)
    begin
        if ((tcp_out_V_user_V_1_sel = ap_const_logic_1)) then 
            tcp_out_V_user_V_1_data_out <= tcp_out_V_user_V_1_payload_B;
        else 
            tcp_out_V_user_V_1_data_out <= tcp_out_V_user_V_1_payload_A;
        end if; 
    end process;

    tcp_out_V_user_V_1_load_A <= (tcp_out_V_user_V_1_state_cmp_full and not(tcp_out_V_user_V_1_sel_wr));
    tcp_out_V_user_V_1_load_B <= (tcp_out_V_user_V_1_state_cmp_full and tcp_out_V_user_V_1_sel_wr);
    tcp_out_V_user_V_1_sel <= tcp_out_V_user_V_1_sel_rd;
    tcp_out_V_user_V_1_state_cmp_full <= '0' when (tcp_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    tcp_out_V_user_V_1_vld_in_assign_proc : process(tcp_in_V_data_V_0_vld_out, tcp_out_V_data_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((tcp_out_V_data_V_1_ack_in = ap_const_logic_0) or (tcp_in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tcp_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            tcp_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_user_V_1_vld_out <= tcp_out_V_user_V_1_state(0);
end behav;
